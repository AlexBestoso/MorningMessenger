Server Communication Protocol: 

if already here
	+wait for client's public key and take hash of it upon recipt.
	+if key isn't trysted, close connection and exit.
	send client server public key. (Client side will also be able to validate server key)
	+if leave a message
	+	wait for message
	+	tell user if recpt was successful or not.
	+	close connection.
	else if stream chat
		server generates two AES CTR keys and IVs.
		server sends key pair to client.
		Server then creates a AF_UNIX server forked.
			socket in is routed to AF_UNIX server out.
			AF_UNIX server in is routerd to socket out.
		server master can then see that there's an active chat and join it at will.
	 
else
	close connection. They a bad guy.
	

--/-/-/-/-/
New structure plans:

1) Run setup check, determine if first install or not.
2) Fork into two processes. One for menu control, one for notifications.

--/-/-/-/-/
fix DoS bug. 
	SQL will crash the application if the received message subject is too long.

Add mysql server to install process
	allow install process to create it's own restricted mysql user.

fix compile process for first install to fix shared object bug
	This can currently be circumvented by just running the compilation process again.

Figure out a way to add dns proxying to the applicaiton so that we can increase the speed and ease of use for the tor enabled mode.

update the message code so that we desanitize text when it's pulled from the message table
	this will reduce messages from having an unneccisary number of escape characters to them as they move between read and unread.

Add size checks for the subject field, and maybe even get rid of it, or make it optional to use.
