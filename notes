example of trusted key file. Everything must be encrypted with the exception of the uid and the public key location. 
As these two things will be used to place store the message properly. When you login properly, the names and contact info will be cached in memory.
<root>
	<uid>UNIQUE-ID-OF-TRUSTED-PERSON</uid>
	<pubkey>/location/of/public/key.pem</pubkey>
	<alias>Name of your Friend</alias>
	<remoteserverhost>yourFriendsDomain.onion</remoteserverhost>
	<remoteserverport>21345(default)</remoteserverport>
</root>

Example of message file. The entire message will be crafted by the client. the message data will be encrypted. Then the rest of the message will be encrypted as well
to prevent manipulation of the self destruct bit.
<root>
	<recptdate>date and time</recptdate>
	<messagedata>ENCRYPTED DATA<messagedata>
	<selfdestruct>(0 or 1)</selfdesctruct>
	
</root>

[Startup Procedure]
++1) check in storage folder for config file. if file is missing, run initial setup procedure, else continue to authentication.
2) Ensure required directories exist and make them if they don't
3) requet username and password. 
4) use password to decryot config, if decryption failes, show invalid credentails, else load values into morning messenger class.
5) generate private key decryption key using username and password. decrypt private key into memory.
6) generate private key export password using username, passowrd, and pin number. Validate generated password, if failed show invalid credentials.
4) display main menu.

